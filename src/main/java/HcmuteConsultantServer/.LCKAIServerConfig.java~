E:\KLTN\hcmute-consultant-server\src\main\java\HcmuteConsultantServer\AIServerConfig.java

import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.io.File;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;

@Configuration
public class AIServerConfig {

    private static final Logger logger = LoggerFactory.getLogger(AIServerConfig.class);
    private Process aiProcess;

    @Bean
    public CommandLineRunner startAIServer() {
        return args -> {
            logger.info("Đang khởi động AI server...");
            
            try {
                // Xác định đường dẫn đến thư mục chatbot
                String projectRoot = System.getProperty("user.dir");
                String chatbotDir = projectRoot + File.separator + "chatbot";
                
                // Kiểm tra xem thư mục chatbot có tồn tại không
                File chatbotFolder = new File(chatbotDir);
                if (!chatbotFolder.exists() || !chatbotFolder.isDirectory()) {
                    logger.error("Không tìm thấy thư mục chatbot tại: {}", chatbotDir);
                    return;
                }
                
                // Tạo ProcessBuilder để chạy lệnh python app.py
                ProcessBuilder processBuilder = new ProcessBuilder();
                
                // Đặt thư mục làm việc
                processBuilder.directory(chatbotFolder);
                
                // Đặt lệnh để chạy - thử cả python và python3
                String pythonCommand = isPythonAvailable() ? "python" : "python3";
                processBuilder.command(pythonCommand, "app.py");
                
                // Chuyển hướng output của process vào console
                processBuilder.redirectErrorStream(true);
                processBuilder.inheritIO();
                
                // Khởi động process
                aiProcess = processBuilder.start();
                
                // Đợi một chút để AI server khởi động
                Thread.sleep(2000);
                
                // Kiểm tra xem AI server đã khởi động thành công chưa
                if (isAIServerRunning()) {
                    logger.info("AI server đã được khởi động thành công trên localhost:5000");
                } else {
                    logger.error("Không thể khởi động AI server. Vui lòng kiểm tra logs.");
                }
                
                // Đăng ký shutdown hook để kill process khi ứng dụng Spring Boot dừng
                Runtime.getRuntime().addShutdownHook(new Thread(() -> {
                    logger.info("Đang dừng AI server...");
                    if (aiProcess != null && aiProcess.isAlive()) {
                        aiProcess.destroy();
                    }
                }));
                
            } catch (Exception e) {
                logger.error("Lỗi khi khởi động AI server: {}", e.getMessage(), e);
            }
        };
    }
    
    private boolean isPythonAvailable() {
        try {
            Process process = Runtime.getRuntime().exec("python --version");
            int exitCode = process.waitFor();
            return exitCode == 0;
        } catch (Exception e) {
            return false;
        }
    }
    
    private boolean isAIServerRunning() {
        try {
            URL url = new URL("http://localhost:5000/chat?text=test");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.setConnectTimeout(5000);
            connection.connect();
            
            int responseCode = connection.getResponseCode();
            return responseCode == 200;
        } catch (Exception e) {
            return false;
        }
    }
}